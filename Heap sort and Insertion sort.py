# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eBlplXiyNZryfCJbumeJf5AqcQ4MLAi9
"""



import time
import matplotlib.pyplot as plt
import random

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

def heapify(arr, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    if left < n and arr[left] > arr[largest]:
        largest = left

    if right < n and arr[right] > arr[largest]:
        largest = right

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)

n_values = [100, 500, 1000, 5000, 10000]
insertion_times = []
heap_times = []

for n in n_values:
    arr = [random.randint(0, n) for _ in range(n)]

    arr_copy = arr.copy()
    start_time = time.time()
    insertion_sort(arr_copy)
    end_time = time.time()
    insertion_times.append(end_time - start_time)

    arr_copy = arr.copy()
    start_time = time.time()
    heap_sort(arr_copy)
    end_time = time.time()
    heap_times.append(end_time - start_time)

plt.plot(n_values, insertion_times, marker='o', label='Insertion Sort', color='r')
plt.plot(n_values, heap_times, marker='o', label='Heap Sort', color='b')
plt.title('Time Complexity Comparison: Insertion vs Heap Sort')
plt.xlabel('Number of Elements (n)')
plt.ylabel('Time Taken (seconds)')
plt.legend()
plt.grid(True)
plt.show()